<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2019/07/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里经典面试题（内附详细解析哟）]]></title>
      <url>/2019/02/25/%E9%98%BF%E9%87%8C%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E5%86%85%E9%99%84%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90%E5%93%9F%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="函数的角色"><a href="#函数的角色" class="headerlink" title="函数的角色"></a>函数的角色</h4><ol>
<li>普通函数</li>
</ol>
<p>—–》堆栈内存释放</p>
<p>—–》作用域链</p>
<ol start="2">
<li>类</li>
</ol>
<p>—–&gt;prototype :  原型</p>
<p>—-&gt;<strong>proto</strong>  :  原型链</p>
<ol start="3">
<li>普通对象</li>
</ol>
<p>——》和普通的函数没有区别–就是对键值对的的增删改查</p>
<p><strong>==&gt;       三种关系之间没有必然联系</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">function Fn()&#123;</span><br><span class="line">    var m=10;</span><br><span class="line">    this.n=20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fn.protototype.aa=function()&#123;</span><br><span class="line">    consoleo.log(&apos;aa&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fn.bb=function()&#123;</span><br><span class="line">    console.log(&apos;bb&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​<br>=&gt;普通函数——-》this.n指的是window下的n，m指的是私有变量m</p>
<p>=&gt;构造函数执行的时候</p>
<p>var f=new Fn()</p>
<p>console.log(f.n)——m是Fn私有的变量和实例没有关系</p>
<p>f.n是实例的私有属性</p>
<p>f.aa实例通过prototype找到了Fn.prototype上的属性</p>
<p>f.bb是把Fn当作一个普通对象设置的属性而已，和实例没有半毛钱关系</p>
<p>=》普通对象：</p>
<p>Fn.bb是obj的属性</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>函数作为对象中使用的时候,只能对键值对进行增删改查，只能自己直接调用自己.出来的方法；不能调用prototype中的方法和属性</p>
<p>函数在作为构造函数使用的时候，实例可以调用prototype和this.出来的</p>
<p>函数作为普通函数的时候，只能使用自身的属性</p>
<h2 id="阿里巴巴关于函数的三种角色的面试题"><a href="#阿里巴巴关于函数的三种角色的面试题" class="headerlink" title="阿里巴巴关于函数的三种角色的面试题"></a>阿里巴巴关于函数的三种角色的面试题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">function Foo()&#123;</span><br><span class="line">    </span><br><span class="line">    getName=function()&#123;</span><br><span class="line">        console.log(1)</span><br><span class="line">    &#125;</span><br><span class="line">    return this</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName=function()&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.getName=function()&#123;</span><br><span class="line">    </span><br><span class="line">    console.log(3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var getName=function()&#123;</span><br><span class="line">    console.log(4)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getName()&#123;</span><br><span class="line">    console.log(5)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">问题:</span><br><span class="line"></span><br><span class="line">1.Foo.getName();          </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">getName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Foo().getName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Foo.getName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Foo().getName();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new new Foo().getName();</span><br></pre></td></tr></table></figure>

<p>==2 ————————//此时把Foo当成一个对象，找到Foo的私有方法执行  </p>
<p>==4————————//由于变量提升，执行全局下的getName</p>
<p>==1————————//将getName重新赋值为1，然后return window继而调用全局下的getName（），此时的getName是1</p>
<p>==1————————//此时全局下的getName下的值为1</p>
<p>==2————————//因为无参数列表的new（）的优先级小于函数调用的优先级所以</p>
<p>==3————————//因为由参数列表的new的优先级大于函数调用的优先级，所以从左向右执行，因为是实例对象调用，所以先去构造函数身上找，当没有找到的时                候,再去prototype中去寻找</p>
<p>==3————————//先计算new Foo()，创建一个新的实例f,然后变成了  new f.getName()，然后执行f.getName最后再把执行后的结果new一下，其实就相当于把                            f.getName()当作一个类，然后再返回这个类的实例</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
