<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[StoryBook6.0]]></title>
      <url>/2021/02/07/StoryBook6-0/</url>
      <content type="html"><![CDATA[<h2 id="组件化开发常见的问题"><a href="#组件化开发常见的问题" class="headerlink" title="组件化开发常见的问题"></a>组件化开发常见的问题</h2><p>无论你使用<code>React</code>还是<code>Vue</code>进行项目开发，都一定都会封装出各种各样的组件，这些组件将一个完整的页面分成若干份，让整体的代码看起来更加清晰易读</p>
<p>随着项目越来越复杂，你可能会写出很多好用的公共组件，但这些组件往往都被引入在复杂的页面结构中，使其没有办法清晰的展示给其他的协同开发人员，所以我们总会看到一个组件在项目中被实现了一遍又一遍。而这种情况在B端系统中尤为常见</p>
<p>在平时常见的脚手架（React，Vue）搭建的项目中，并没有可以单独展示组件的入口，所以如何把项目中的公共组件进行优雅的展示，成为一个值得讨论的问题。</p>
<h2 id="StoryBook"><a href="#StoryBook" class="headerlink" title="StoryBook"></a>StoryBook</h2><p><code>StoryBook</code>是目前最受欢迎的 组件可视化展示平台 ,自上线以来就一直被广大开发者青睐。可以为目前大部分框架提供结构化的UI开发和文档。</p>
<p>2020年8月，<code>StoryBook</code>又推出了6.0版本（几乎完全向后兼容5.X.），本次的改动大大的加强了它的使用体验。有以下几个方面：</p>
<ol>
<li>零配置设置</li>
<li>新一代的故事格式</li>
<li>实时编辑，无需代码</li>
</ol>
<h2 id="安装初始化storyBook"><a href="#安装初始化storyBook" class="headerlink" title="安装初始化storyBook"></a>安装初始化storyBook</h2><p>如果你想在已有的项目中引入<code>StoryBook</code>，那直接去情况二就好，如果你想创建一个新的项目，那么请选择情况一</p>
<h4 id="情况一：新项目中生成StoryBook"><a href="#情况一：新项目中生成StoryBook" class="headerlink" title="情况一：新项目中生成StoryBook"></a>情况一：新项目中生成StoryBook</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 创建组件库目录</span><br><span class="line">mkdir storybook-project</span><br><span class="line"></span><br><span class="line"># 进入项目</span><br><span class="line">cd storybook-project</span><br><span class="line"></span><br><span class="line"># 初始化storybook</span><br><span class="line">npx sb init</span><br><span class="line"></span><br><span class="line">==这时会进行提示==</span><br><span class="line"></span><br><span class="line"># 你是否要手动选择要安装的storybook项目类型？</span><br><span class="line">Do you want to manually choose a Storybook project type to install? y/n</span><br><span class="line"></span><br><span class="line">选择y</span><br><span class="line"></span><br><span class="line"># 下一步选择项目类型：react（以react为例）</span><br><span class="line"> Please choose a project type <span class="keyword">from</span> the following list:</span><br><span class="line"></span><br><span class="line">选择react</span><br><span class="line">--------------------------------------------------</span><br><span class="line"># 当然，</span><br><span class="line">你也可以在初始化的时候直接指定好项目类型：</span><br><span class="line"></span><br><span class="line">npx sb init --type react</span><br></pre></td></tr></table></figure>

<h5 id="注意"><a href="#注意" class="headerlink" title="== 注意 =="></a>== 注意 ==</h5><p>以<code>React</code>为例，假如你的新项目还没有安装过除<code>StoryBook</code>之外任何依赖，你需要安装你选择的框架类型所对应的相关依赖包。否则<code>StoryBook</code>会因为找不到这些依赖而导致报错</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom --save</span><br></pre></td></tr></table></figure>

<h4 id="情况二：已有的项目中引入StoryBook"><a href="#情况二：已有的项目中引入StoryBook" class="headerlink" title="情况二：已有的项目中引入StoryBook"></a>情况二：已有的项目中引入StoryBook</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#先进入到已有项目的目录,执行</span><br><span class="line"></span><br><span class="line">npx sb init</span><br><span class="line"></span><br><span class="line"># 例如当前的项目是Vue、React、框架搭建的， storybook 会自动检测项目类型并进行初始化！！</span><br></pre></td></tr></table></figure>

<p>自StoryBook6.0起，<code>.storybook</code>的文件夹里面只有两个文件，并且已经默认配置好<code>add-docs (配置文档)</code>、<code>addon-info(自动化)</code>等常用的功能（6.0之前的版本都需要安装对应的依赖，并进行配置，很繁琐！！！）</p>
<h2 id="运行storyBook"><a href="#运行storyBook" class="headerlink" title="运行storyBook"></a>运行storyBook</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run storybook</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">yarn storybook</span><br></pre></td></tr></table></figure>

<p>到这里你应该已经成功的运行起来<code>StoryBook</code>了，接下来介绍一些 <code>StoryBook</code>中常用的操作</p>
<h2 id="编写StoryBook"><a href="#编写StoryBook" class="headerlink" title="编写StoryBook"></a>编写StoryBook</h2><p>== 以默认初始化好的Button组件为例~ ==</p>
<ol>
<li>首先你需要创建一个以<code>.stories.js</code>或者<code>.stories.tsx</code>结尾的文件（运行StoryBook的时候，会自动匹配后缀名）</li>
<li>然后在这个文件中引入你写好的组件</li>
<li>接下来就是编写组件的<code>StoryBook</code></li>
</ol>
<p>基本代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.stories.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">//导入你写好的组件</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'xxxx'</span></span><br><span class="line"><span class="comment">//创建模板</span></span><br><span class="line"><span class="keyword">const</span> Template = <span class="function">(<span class="params">args</span>) =&gt;</span> &lt;Button &#123;...args&#125; /&gt;;</span><br><span class="line">//导出被展示的组件</span><br><span class="line">export const Primary = Template.bind(&#123;&#125;);</span><br><span class="line">//为该组件设置参数</span><br><span class="line">Primary.args = &#123;</span><br><span class="line">  //组件需要接受的属性</span><br><span class="line">  primary: true,</span><br><span class="line">  label: 'Primary',</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这时组件就会被成功的展示：</p>
<figure class="image-box">
                <img src="/Users/koolearn/Library/Application" alt="image-20210203100835369" title="Support/typora-user-images/image-20210203100835369.png" class>
                <p>Support/typora-user-images/image-20210203100835369.png</p>
            </figure>

<h3 id="故事页中组件的基本配置以及常见操作："><a href="#故事页中组件的基本配置以及常见操作：" class="headerlink" title="故事页中组件的基本配置以及常见操作："></a>故事页中组件的基本配置以及常见操作：</h3><p>下列代码主要涉及几个属性的配置</p>
<ul>
<li>title：设置左边的菜单栏，展示组件的名称</li>
<li>component:需要展示的组件</li>
<li>argTypes：对一些特定的属性进行特殊的配置</li>
<li>decorators：为组件添加样式</li>
</ul>
<p>如何生成一个新的展示页？</p>
<p>每导出一个新的组件，StoryBook就会为你重新创建一个展示页面（如下图）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.stories.js</span></span><br><span class="line"># 我们可以在这个对象中对本故事页进行配置，在该对象中配置过的属性会在该组件的整个故事页中生效</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  # Example是该组件的一级标题名称，Button是该组件的二级标题名称</span><br><span class="line">  title: <span class="string">'Example/Button'</span>,</span><br><span class="line">  # Button需要展示的组件</span><br><span class="line">  component: Button,</span><br><span class="line">  ,</span><br><span class="line">  # 为背景色添加颜色控制器（这是storybook自带的颜色选择器）</span><br><span class="line"> argTypes: &#123;</span><br><span class="line">    backgroundColor: &#123; <span class="attr">control</span>: <span class="string">'color'</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  # 装饰器，修饰组件的样式</span><br><span class="line">  decorators: [<span class="function">(<span class="params">Story</span>) =&gt;</span> &lt;div style=&#123;&#123; margin: '3em' &#125;&#125;&gt;&lt;Story/&gt;&lt;/div&gt;]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> Template = <span class="function">(<span class="params">args</span>) =&gt;</span> &lt;Button &#123;...args&#125; /&gt;;</span><br><span class="line"># 每次导出都会重新创建一个展示页</span><br><span class="line">export const Primary = Template.bind(&#123;&#125;);</span><br><span class="line"># 每次导出都会重新创建一个展示页，</span><br><span class="line">export const second=Template.bind(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"># 可以通过修改storyName的方式为组件改名（中文也可以）</span><br><span class="line">second.storyName='Secondary'</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<figure class="image-box">
                <img src="https://gitee.com/lxx7473/images/raw/master/img/config-story.png" alt="image-20210203110400190" title class>
                <p>image-20210203110400190</p>
            </figure>

<h3 id="Args"><a href="#Args" class="headerlink" title="Args"></a>Args</h3><p>每个组件都需要传入一些属性用来切换组件的不同状态，</p>
<h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><p><code>Decorators</code>可以对你要展示的组件进行装饰，修改每个故事中的组件的样式，比如让组件居中，左对齐等等。</p>
<p>基本用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.stories.tsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  component: Button,</span><br><span class="line">  decorators: [<span class="function">(<span class="params">Story</span>) =&gt;</span> &lt;div style=&#123;&#123; margin: '3em' &#125;&#125;&gt;&lt;Story/&gt;&lt;/div&gt;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>展示：</p>
<figure class="image-box">
                <img src="https://gitee.com/lxx7473/images/raw/master/img/storybook.png" alt="image-20210203102246168" title class>
                <p>image-20210203102246168</p>
            </figure>

<h5 id="注意-1"><a href="#注意-1" class="headerlink" title="== 注意 =="></a>== 注意 ==</h5><p>这种配置方式会作用于<code>Button.stories.tsx</code>下所有的<code>Button</code></p>
<p>当然我们也可以对某个组件进行单独配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  title: <span class="string">'Example/Button'</span>,</span><br><span class="line">  component: Button,</span><br><span class="line">  argTypes: &#123;</span><br><span class="line">    backgroundColor: &#123; <span class="attr">control</span>: <span class="string">'color'</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"># 模板1</span><br><span class="line"><span class="keyword">const</span> Template1 = <span class="function">(<span class="params">args</span>) =&gt;</span> &lt;div style=&#123;&#123;margin:'3em'&#125;&#125;&gt;&lt;Button &#123;...args&#125; /&gt;&lt;/div&gt;;</span><br><span class="line"># 模板2</span><br><span class="line">const Template2 = (args) =&gt; &lt;div &gt;&lt;Button &#123;...args&#125; label=&#123;'button'&#125;/&gt;&lt;/div&gt;;</span><br><span class="line"></span><br><span class="line">export const Primary = Template1.bind(&#123;&#125;);</span><br><span class="line">Primary.args = &#123;</span><br><span class="line">  primary: true,</span><br><span class="line">  label: 'Button',</span><br><span class="line">&#125;;</span><br><span class="line">export const second = Template2.bind(&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>Primary组件样式已经被改变</p>
<figure class="image-box">
                <img src="/Users/koolearn/Library/Application" alt="image-20210203112425437" title="Support/typora-user-images/image-20210203112425437.png" class>
                <p>Support/typora-user-images/image-20210203112425437.png</p>
            </figure>

<p>Second组件样式未被改变</p>
<figure class="image-box">
                <img src="https://gitee.com/lxx7473/images/raw/master/img/moban.png" alt="image-20210203112804191" title class>
                <p>image-20210203112804191</p>
            </figure>



<h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>通常用于控制Storybook功能和插件的行为。例如，我们通过参数自定义背景插件。</p>
<p>在单个故事页中设置parameters</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.story.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Primary = Template.bind(&#123;&#125;);</span><br><span class="line">Primary.args = &#123;</span><br><span class="line">  primary: <span class="literal">true</span>,</span><br><span class="line">  label: <span class="string">'Button'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">Primary.parameters = &#123;</span><br><span class="line">  backgrounds: &#123;</span><br><span class="line">    values: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'red'</span>, <span class="attr">value</span>: <span class="string">'#f00'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'green'</span>, <span class="attr">value</span>: <span class="string">'#0f0'</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>也在全局中设置parameters</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/preview.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> parameters = &#123;</span><br><span class="line">  backgrounds: &#123;</span><br><span class="line">    values: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'red'</span>, <span class="attr">value</span>: <span class="string">'#f00'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'green'</span>, <span class="attr">value</span>: <span class="string">'#0f0'</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>展示：</p>
<figure class="image-box">
                <img src="https://gitee.com/lxx7473/images/raw/master/img/bg-storybook.png" alt="image-20210203143450841" title class>
                <p>image-20210203143450841</p>
            </figure>



<h2 id="StoryBook中的Doc-文档-配置"><a href="#StoryBook中的Doc-文档-配置" class="headerlink" title="StoryBook中的Doc(文档)配置"></a>StoryBook中的Doc(文档)配置</h2><p><code>DocsPage</code>是零配置的默认文档，它将您的组件，文本描述，args表，代码示例，统一展示到<code>Doc</code>页面中，自动生成如图：</p>
<figure class="image-box">
                <img src="https://gitee.com/lxx7473/images/raw/master/img/20210203155030.png" alt="image-20210203154951177" title class>
                <p>image-20210203154951177</p>
            </figure>

<p>当然如果默认的<code>doc</code>文档不能满足你所预期的时候，你也可以对该<code>doc</code>结构进行配置，不过官方的建议是：希望每个组件都有自己的文档和故事集。</p>
<h2 id="Doc中的常见配置"><a href="#Doc中的常见配置" class="headerlink" title="Doc中的常见配置"></a>Doc中的常见配置</h2><h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><p>我们可以通过设置<code>docs.page</code>的值来改变<code>doc</code>文档的结构。当<code>page</code>值为<code>null</code>的时候。</p>
<p><strong>组件层</strong></p>
<p>作用范围：<code>Primary</code>组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">// Button.stories.js | Button.stories.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Primary = Template.bind(&#123;&#125;);</span><br><span class="line">Primary.parameters = &#123; <span class="attr">docs</span>: &#123; <span class="attr">page</span>: <span class="literal">null</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p><strong>故事层</strong></p>
<p>作用范围：该文件下的组件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">// Button.stories.js | Button.stories.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">'./Button'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  title: <span class="string">'Button'</span>,</span><br><span class="line">  component: Button,</span><br><span class="line">  parameters: &#123; </span><br><span class="line">    docs: &#123; </span><br><span class="line">      page: <span class="literal">null</span> </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>全局层</strong></p>
<p>作用范围：所有以<code>stories.js||stories.jsx||stories.tsx</code>结尾的文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">// .storybook/preview.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> parameters = &#123; <span class="attr">docs</span>: &#123; <span class="attr">page</span>: <span class="literal">null</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>

<p>效果如图：</p>
<figure class="image-box">
                <img src="https://gitee.com/lxx7473/images/raw/master/img/20210203155502.png" alt="image-20210203155502431" title class>
                <p>image-20210203155502431</p>
            </figure>

<p>通过修改<code>page</code>属性我们也可以<code>doc</code>的结构进行配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.Button.stories.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">     Title,</span><br><span class="line">     Subtitle,</span><br><span class="line">     Description,</span><br><span class="line">     Primary,</span><br><span class="line">     ArgsTable,</span><br><span class="line">     Stories,</span><br><span class="line">     PRIMARY_STORY,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@storybook/addon-docs/blocks'</span> </span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">parameters: &#123;</span><br><span class="line">        docs: &#123;</span><br><span class="line">            page: <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">                &lt;&gt;</span><br><span class="line">              <span class="comment">//大标题</span></span><br><span class="line">                 &lt;Title /&gt;</span><br><span class="line">              <span class="comment">//小标题</span></span><br><span class="line">                 &lt;Subtitle /&gt; </span><br><span class="line">              <span class="comment">//描述</span></span><br><span class="line">                  &lt;Description /&gt; </span><br><span class="line">              <span class="comment">//被展示的组件</span></span><br><span class="line">                   &lt;Stories includePrimary=&#123;<span class="literal">true</span>&#125; title=<span class="string">''</span> /&gt;</span><br><span class="line">              <span class="comment">//组件的属性列表</span></span><br><span class="line">                    &lt;ArgsTable story=&#123;PRIMARY_STORY&#125; /&gt;</span><br><span class="line">                &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">            ),</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> 组件化工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你可能不知道的Set和WeakSet]]></title>
      <url>/2020/11/30/%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84Set%E5%92%8CWeakSet/</url>
      <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>Set</code> 是 <code>ES6</code> 提供的一种新的数据结构， 和数组一样，都可以用来存储有序的数据集合，但是它本身却不具备根据索引的访问某一个具体元素的能力，你可以按照插入的顺序迭代它的元素。 不过需要<strong>注意</strong>的是<code>Set</code>中的元素只会<strong>出现一次</strong>，即 Set 中的元素是唯一的。说了这么多，让我们来看一下Set的语法吧~</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3>]]></content>
      
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodeneibu]]></title>
      <url>/2020/11/27/nodeneibu/</url>
      <content type="html"><![CDATA[<h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p><img src="//yoursite.com/2020/11/27/nodeneibu/images/nodeneibu/1.png" alt="1"></p>
]]></content>
      
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript中的模块化(更新中~)]]></title>
      <url>/2020/11/26/Javascript%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>写笔记的本意是对自己所学知识的一个总结，目前文笔和技术都不算成熟，可能有些知识点表达的不是很准确或有误，欢迎批评指正~~</strong></p>
<h2 id="Javascript模块化开发"><a href="#Javascript模块化开发" class="headerlink" title="Javascript模块化开发"></a>Javascript模块化开发</h2><p>​    众所周知，早期的<code>Javascript</code>大多情况被用来做表单验证、动画实现，通常情况下短短几行代码就可以搞定。并且都被编写在<code>script标签</code>里面。<br>​    但是随着前端和<code>JavaScript</code>的快速发展，<code>JavaScript</code>代码变得越来越复杂，从<code>Ajax</code>的出现，到后来的前后端分离，再到现在的SPA应用，前端页面正在变的越来越复杂，而没有”模块化“这件事，在很长一段时间都是<code>Javascript</code>的硬伤</p>
<h4 id="没有模块化会引发的问题"><a href="#没有模块化会引发的问题" class="headerlink" title="没有模块化会引发的问题"></a>没有模块化会引发的问题</h4><ul>
<li>代码多，命名冲突概率大</li>
<li>代码冗余，请求过多拖慢速度</li>
<li>文件间依赖增多，易出现引用错误，导致代码运行出错</li>
<li>修改或者改版时，要去成百上千行代码里找，难维护<br>综上所述，不论是从开发还是体验角度，都需要解决方案。<h4 id="前端众多的模块化解决方案"><a href="#前端众多的模块化解决方案" class="headerlink" title="前端众多的模块化解决方案"></a>前端众多的模块化解决方案</h4></li>
</ul>
<p>JavaScript社区为了解决上面的问题，曾涌现出一系列好用的规范</p>
<p>例如：</p>
<ul>
<li>CommonJs</li>
<li>AMD</li>
<li>CMD</li>
<li>ES module</li>
</ul>
<p>由于AMD和CMD现在应用的地方并不是很多，所以本文主要针对<strong>CommonJS</strong>的模块化进行介绍，也会对<strong>ES Module</strong>进行简要介绍</p>
<h2 id="CommonJS和Node"><a href="#CommonJS和Node" class="headerlink" title="CommonJS和Node"></a>CommonJS和Node</h2><p> 我们需要知道<code>CommonJS</code>是一个规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为<code>ServerJS</code>，后来为了体现它的广泛性，修改为<code>CommonJS</code>，平时我们也会简称为<code>CJS</code>。</p>
<ul>
<li><code>Node</code>是<code>CommonJS</code>在服务器端一个具有代表性的实现； </li>
<li><code>Browserify</code>是<code>CommonJS</code>在浏览器中的一种实现；</li>
<li><code>webpack</code>打包工具具备对<code>CommonJS</code>的支持和转换；</li>
</ul>
<p>由于<code>Node</code>对<code>CommonJS</code>进行了支持和实现，所以我们可以在开发中很方便的进行模块化开发，但要特别注意两点</p>
<ul>
<li>在<code>Node</code>中每一个<code>JS</code>文件都是一个单独的模块；</li>
<li>这个模块中包括<code>CommonJS</code>规范的核心变量：<code>exports</code>、<code>module.exports</code>、<code>require</code>；</li>
</ul>
<h4 id="Node模块化的导入和导出"><a href="#Node模块化的导入和导出" class="headerlink" title="Node模块化的导入和导出"></a>Node模块化的导入和导出</h4><p>其中<code>exports</code>和<code>module.exports</code>可以负责对模块中的内容进行导出； </p>
<p><code>require</code>函数可以帮助我们导入其他模块，包括：（自定义模块、系统模块、第三方库模块）；</p>
<h4 id="exports与require"><a href="#exports与require" class="headerlink" title="exports与require"></a>exports与require</h4><p>下图短短几行代码，就是对<code>Node</code>模块化的体现~</p>
<p><code>exports</code>的本质是一个对象（如下图）。</p>
<p>在<code>1.js文件</code>中</p>
<ul>
<li>通过<code>.</code>的方式动态的为<code>exports</code>这个对象添加属性，将该对象导出该模块</li>
<li>蓝色框中代表的是被导出的属性名，<strong>可以为任意值。</strong></li>
</ul>
<p>在<code>2.js文件</code>中</p>
<ul>
<li>通过<code>data</code>来对<code>require函数</code>的返回值进行接收，<strong>实际上：接受到的data值实际就是导出的exports对象</strong>！相信很多人看到这个结论都是疑惑的。那我们不妨论证一下这个观点。</li>
</ul>
<img src="/2020/11/26/Javascript中的模块化/1.png" title="This is an example image">

<h4 id="验证require函数的返回值是否与exports相等"><a href="#验证require函数的返回值是否与exports相等" class="headerlink" title="验证require函数的返回值是否与exports相等"></a>验证require函数的返回值是否与exports相等</h4><p>如上图所示：</p>
<ol>
<li>首先我们先将<code>name</code>,<code>age</code>两个变量分别导出，然后在<code>2.js</code>中进行引入，</li>
<li>打印结果，然后在1s之后给<code>data</code>的<code>name</code>属性重新赋值</li>
<li>在2s后重新打印<code>1.js</code>中<code>exports</code>这个对象的值，</li>
<li>如果<code>exports</code>这个对象的<code>name</code>属性被重新赋值，就说明<code>require函数</code>的返回值与<code>exports</code>这个对象指向的是同一个地址</li>
</ol>
<img src="/2020/11/26/Javascript中的模块化/2.png" title="This is an example image">



<h4 id="画图解析上图代码"><a href="#画图解析上图代码" class="headerlink" title="画图解析上图代码"></a>画图解析上图代码</h4><img src="/2020/11/26/Javascript中的模块化/3.png" title="This is an example image">



<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><code>exports</code>被重新赋值，说明<code>exports</code>对象和<code>require</code>函数的返回值指向同一个引用地址（浅拷贝）。</p>
<p>到这里我们已经看似完成了模块化的两个关键因素，导入和导出，那么<code>module.exports</code>又是什么呢？它和<code>exports</code>又有什么区别呢？让我们接着往下看。</p>
<h4 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h4><p>首先，我们要知道<code>CommonJS规范</code>中是没有<code>module.exports</code>这个概念的，</p>
<p>Node在实现的过程中使用的是<code>Module类</code>，每一个模块都是<code>Module</code>的一个实例，我们可以尝试打印一下这个属性（如下图所示），它的默认值是<code>{}</code>,</p>
<img src="/2020/11/26/Javascript中的模块化/4.png" title="This is an example image">

<p>在很多时候我们发现<code>module.exports={name}</code>和<code>exports.name=name</code>这两种导出方式，都可以实现，除了语法之外，二者几乎并无区别，都完成了导出这件事，并且通过下图这种方式我们还可以得知<code>module.exports===exports===2.js</code>中的<code>data</code>，三者指向同一个引用地址</p>
<img src="/2020/11/26/Javascript中的模块化/5.png" title="This is an example image">



<p>但是有一件事还没有确定，那就是<code>module.exports</code>和<code>exports</code>到底是谁真正的实现了<code>Node</code>的模块化导出，我们可以做一个实验，<strong>注意看下面两段代码</strong>！！！</p>
<img src="/2020/11/26/Javascript中的模块化/6.png" title="This is an example image">

<h5 id="第一种操作："><a href="#第一种操作：" class="headerlink" title="第一种操作："></a>第一种操作：</h5><ol>
<li>给<code>module.exports</code>赋值为<code>{}</code></li>
<li>通过<code>exports</code>进行导出</li>
<li>输出结果为{}</li>
</ol>
<p>说明虽然<code>exports</code>在后面进行导出，但仍然被前面的<code>module.exports</code>给覆盖掉了</p>
<img src="/2020/11/26/Javascript中的模块化/7.png" title="This is an example image">

<h5 id="第二种操作"><a href="#第二种操作" class="headerlink" title="第二种操作:"></a>第二种操作:</h5><ol>
<li>先给<code>exports</code>的值设置为{}，</li>
<li>用<code>module.exports</code>导出变量，</li>
<li>仍然可以导出成功变量。</li>
</ol>
<h4 id="为什么第一种操作中，exports会被module-exports覆盖掉？"><a href="#为什么第一种操作中，exports会被module-exports覆盖掉？" class="headerlink" title="为什么第一种操作中，exports会被module.exports覆盖掉？"></a>为什么第一种操作中，exports会被module.exports覆盖掉？</h4><p>结合图片（图没画好。。）我们可以看出，第二步的时候<code>module.exports</code>改变了引用地址，所以不管<code>exports</code>的值再怎么变化，也不会影响导出的结果。</p>
<img src="/2020/11/26/Javascript中的模块化/8.png" title="This is an example image">





<h4 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h4><p><strong>所以在Node中真正实现导出的是<code>module.exports</code></strong>,而不是<strong><code>exports</code></strong>  ，也就是<strong><code>exports=module.exports</code></strong>,并且这个操作是在模块开始加载的时候就被执行了。</p>
<h2 id="require中的细节"><a href="#require中的细节" class="headerlink" title="require中的细节"></a>require中的细节</h2><p>介绍了这么多的模块的导出，接下来讲一下<code>require</code>导入的细节，我们知道<code>require</code>是一个函数，可以帮助我们引入一个文件（模块）中导入的对象，那么<code>require</code>的查找规则到底是怎么样的呢？</p>
<p>暂且假定<code>require(X)</code></p>
<h4 id="情况一：核心模块"><a href="#情况一：核心模块" class="headerlink" title="情况一：核心模块"></a>情况一：核心模块</h4><p>X是一个核心模块，比如<code>path</code>，<code>http</code></p>
<ul>
<li>直接返回核心模块停止查找</li>
</ul>
<p>如果你想引入一个和核心模块相同名字的自定义模块的时候，你是不成功的，如果想要成功就必须换一个名字，</p>
<h4 id="情况二：路径形式的文件模块"><a href="#情况二：路径形式的文件模块" class="headerlink" title="情况二：路径形式的文件模块"></a>情况二：路径形式的文件模块</h4><p>X是以./或者../或者/（根目录开头的）</p>
<p><strong>第一步：将X当做一个文件在对应的目录下查找</strong></p>
<ol>
<li>如果有后缀名，直接按照文件路径查找对应的文件</li>
<li>如果没有后缀名，会按照如下顺序<ol>
<li>直接查找文件X（无后缀）</li>
<li>查找<code>X.js文件</code></li>
<li>查找<code>X.json文件</code></li>
<li>查找<code>X.node文件</code></li>
</ol>
</li>
</ol>
<p><strong>第二步：没有找到对应的文件，将X作为一个目录</strong></p>
<ul>
<li><p>查找目录下面的<code>index</code>文件</p>
<ol>
<li>查找<code>X/index.js文件</code></li>
<li>查找<code>X/index.json文件</code></li>
<li>查找<code>X/index.node文件</code> </li>
</ol>
<p>如果仍然没找到，那么报错<code>not found</code></p>
</li>
</ul>
<h4 id="情况三：自定义模块"><a href="#情况三：自定义模块" class="headerlink" title="情况三：自定义模块"></a>情况三：自定义模块</h4><p>直接是一个X（没有路径），并且X不是一个核心模块，也可以称为<strong>自定义模块</strong></p>
<p>查找顺序：首先查找当前目录下的node_modules目录，然后查找父级….沿路径向上依次递归，直到根目录下的<code>node_modules</code>目录，该查找方式与<code>Javascript</code>的原型链/作用域链查找方式十分类似，由此也可以看出，模块的路径越深，模块查找的耗时也就越多，这也是自定义模块加载速度是最慢的原因。</p>
<p>ps:(图中的<code>paths</code>，是<code>module</code>中的属性)</p>
<img src="/2020/11/26/Javascript中的模块化/9.png" title="This is an example image">

<h4 id="情况四（特殊）：优先从缓存加载"><a href="#情况四（特殊）：优先从缓存加载" class="headerlink" title="情况四（特殊）：优先从缓存加载"></a>情况四（特殊）：优先从缓存加载</h4><p>除了以上三种情况之外，我们还需要知晓一点，与前端浏览器会缓存静态脚本文件以提高性能一样，<code>Node</code>对引入过的模块都会进行缓存，以减少二次引用的开销，</p>
<h4 id="几种情况的加载速度对比"><a href="#几种情况的加载速度对比" class="headerlink" title="几种情况的加载速度对比"></a>几种情况的加载速度对比</h4><ol>
<li>不管是核心模块还是文件模块，<code>require</code>对于相同模块的二次加载都一律采用<strong>缓存加载优先</strong>的方式，所以属于第一优先级。</li>
<li>而<code>Node</code>核心模块在<code>Node</code>源代码编译过程中，编译进了二进制执行文件</li>
<li>以路径形式的文件模块，以路径作为路引进行查找，由于给定了明确的文件位置，所以也可以节约大量的时间，慢于核心模块</li>
<li>由于既不是核心模块，也没有详细的地址，所以这类文件查找起来是最费时的</li>
</ol>
<p><strong>缓存加载&gt;核心模块&gt;路径形式的文件模块&gt;自定义模块</strong></p>
<h4 id="分析模块的加载过程"><a href="#分析模块的加载过程" class="headerlink" title="分析模块的加载过程"></a>分析模块的加载过程</h4><ul>
<li>如果模块被循环引入，那么加载顺序是什么？让我们看下下面这段代码</li>
</ul>
<img src="/2020/11/26/Javascript中的模块化/10.png" title="This is an example image">

<p>涉及的文件太多，所以我把它抽象成图看起来会清晰一些</p>
<img src="/2020/11/26/Javascript中的模块化/11.png" title="This is an example image">

<ul>
<li>这个其实是一种数据结构：图结构； </li>
<li>图结构在遍历的过程中，有深度优先搜索<code>（DFS, depth first search）</code>和广度优先搜索<code>（BFS, breadth first search）</code>；</li>
<li><code>Node</code>采用的是深度优先算法：<code>aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt;bbb</code></li>
</ul>
<p><strong>所以根据上图，我们知道同一个模块不会被重复加载，并且在模块被循环引用时，会根据深度优先进行引入</strong></p>
<h4 id="问题：模块被多次引入时-为什么只会加载运行一次呢？"><a href="#问题：模块被多次引入时-为什么只会加载运行一次呢？" class="headerlink" title="问题：模块被多次引入时  为什么只会加载运行一次呢？"></a>问题：模块被多次引入时  为什么只会加载运行一次呢？</h4><ul>
<li>这是因为每个模块对象<code>module</code>都有一个属性：<code>loaded</code>。 </li>
<li>当<code>load</code>为<code>false</code>表示还没有加载，为<code>true</code>表示已经加载；</li>
</ul>
<h4 id="CommonJS规范缺点"><a href="#CommonJS规范缺点" class="headerlink" title="CommonJS规范缺点"></a>CommonJS规范缺点</h4><img src="/2020/11/26/Javascript中的模块化/12.png" title="This is an example image">

<p>由图可知在<code>2.js</code>中引用了<code>1.js</code>，而打印的顺序是先执行<code>1.js</code>，之后再执行<code>2.js</code>这说明<code>CommonJS</code>加载模块是同步进行的</p>
<ul>
<li>这个在服务器不会有什么问题，因为服务器加载的js文件都是本地文件，加载速度非常快； </li>
<li>但是在客户端的话情况就不会很乐观，这意味着后面的js代码无法继续正常执行，即使是一些简单的DOM操作</li>
</ul>
<p>所以在浏览器中我们通常不使用<code>CommonJS规范</code>，一般使用<code>ES Module</code>进行模块化开发</p>
<h2 id="ES-Module的特点"><a href="#ES-Module的特点" class="headerlink" title="ES Module的特点"></a>ES Module的特点</h2><p> <code>ES Module</code>模块采用<code>export</code>和<code>import</code><strong>关键字</strong>来实现模块化：</p>
<ul>
<li><code>export</code>负责将模块内的内容导出；</li>
<li><code>import</code>负责从其他模块导入内容；</li>
</ul>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ol>
<li><p>采用<code>ES Module</code>将自动采用严格模式：<code>use strict</code> </p>
<p>如果你不熟悉严格模式可以简单看一下MDN上的解析： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</a></p>
</li>
<li><p>当你在浏览器中直接打开这段代码的时候，会发生跨域。</p>
</li>
</ol>
<p>这个问题在MDN上也有相应的解释：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules</a></p>
<p>大致意思就是： 当本地测试的时候，如果你通过本地加载Html 文件 (比如一个 file:// 路径的文件), 你将会遇到<code>CORS</code>错误，因为<code>Javascript</code>模块安全性需要。 </p>
<p>所以你需要通过一个服务器来测试。</p>
<img src="/2020/11/26/Javascript中的模块化/13.png" title="This is an example image">
<img src="/2020/11/26/Javascript中的模块化/14_1.png" title="This is an example image">


<h4 id="export关键字"><a href="#export关键字" class="headerlink" title="export关键字"></a>export关键字</h4><p><code>export</code>关键字将一个模块中的变量、函数、类等导出；</p>
<p> 我们希望将其他中内容全部导出，它可以有如下的方式：</p>
<ul>
<li>方式一：在语句声明的前面直接加上<code>export</code>关键字</li>
<li>方式二：将所有需要导出的标识符，放到<code>export</code>后面的 <code>{}</code>中 , 注意：这里的 <code>{}</code>里面不是ES6的对象字面量的增强写法，<code>{}</code>也不是表示一个对象的； 所以： <code>export {name: name}</code>，是错误的写法；</li>
<li>方式三：导出时给标识符起一个别名</li>
</ul>
<h4 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h4><p><code>import</code>关键字负责从另外一个模块中导入内容</p>
<p>导入内容的方式也有多种：</p>
<ul>
<li>方式一：<code>import {标识符列表} from &#39;模块&#39;</code>；  注意：这里的{}也不是一个对象，里面只是存放导入的标识符列表内容；</li>
<li>方式二：导入时给标识符起别名</li>
<li>方式三：通过 * 将模块功能放到一个模块功能对象<code>（a module object）</code>上</li>
</ul>
<img src="/2020/11/26/Javascript中的模块化/14.png" title="This is an example image">



<h4 id="default用法"><a href="#default用法" class="headerlink" title="default用法"></a>default用法</h4><p>前面我们学习的导出功能都是有名字的导出（named exports）： </p>
<ul>
<li>在导出<code>export</code>时指定了名字； </li>
<li>在导入<code>import</code>时需要知道具体的名字；</li>
</ul>
<p>还有一种导出叫做默认导出（default export）</p>
<ul>
<li>默认导出<code>export</code>时可以不需要指定名字； </li>
<li>在导入时不需要使用 {}，并且可以自己来指定名字； </li>
<li>它也方便我们和现有的<code>CommonJS</code>等规范相互操作；</li>
</ul>
<img src="/2020/11/26/Javascript中的模块化/15.png" title="This is an example image">

<p><strong>注意：在一个模块中，只能有一个默认导出（default export）；</strong></p>
<h4 id="Node对ES-Module的支持"><a href="#Node对ES-Module的支持" class="headerlink" title="Node对ES Module的支持"></a>Node对ES Module的支持</h4><p>在最新的<code>Current</code>版本中，支持<code>ES module</code>我们需要进行如下操作：</p>
<ul>
<li>方式一：在<code>package.json</code>中配置 <code>type: module</code></li>
<li>方式二：文件以 <code>.mjs</code> 结尾，表示使用的是<code>ES Module</code>； </li>
</ul>
<h4 id="ES-Module加载过程"><a href="#ES-Module加载过程" class="headerlink" title="ES Module加载过程"></a>ES Module加载过程</h4><p><code>ES Module</code>加载<code>js文件</code>的过程是编译（解析）时加载的，并且是异步的</p>
<p>异步的意味着：<code>js引擎</code>在遇到<code>import</code>时会去获取这个<code>js</code>文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行； </p>
<ul>
<li>也就是说设置了<code>type=module</code>的代码，相当于在<code>script标签上</code>也加上了 <code>async</code>属性； </li>
<li>如果我们后面有普通的<code>script标签</code>以及对应的代码，那么<code>ES Module</code>对应的js文件和代码不会阻塞它们的执行</li>
</ul>
<img src="/2020/11/26/Javascript中的模块化/16.png" title="This is an example image">





















































































]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识node]]></title>
      <url>/2020/11/19/%E5%88%9D%E8%AF%86node/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>写笔记的本意是对自己所学知识的一个总结，目前文笔和技术都不算成熟，可能有些知识点表达的不是很准确或有误，欢迎批评指正~~</strong></p>
<h2 id="什么是node-js呢？"><a href="#什么是node-js呢？" class="headerlink" title="什么是node.js呢？"></a>什么是node.js呢？</h2><p>我们先看一下，官方对node.js的定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node.js® is a JavaScript runtime built on Chrome&apos;s V8 JavaScript engine.</span><br></pre></td></tr></table></figure>

<p>翻译过来是： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。</span><br></pre></td></tr></table></figure>

<p>这个官方的解释看起来十分的笼统。</p>
<p>要搞清楚上面这句话的含义，我们要知道</p>
<ul>
<li>什么是V8？</li>
<li>什么是javascript引擎？</li>
<li>什么是javascript运行环境？</li>
<li>为什么javascript运行的时候需要特殊的运行环境？</li>
</ul>
<p>那么让我们先把以上几点一一理清楚</p>
<h2 id="JavaScript代码在浏览器中是如何被执行的？"><a href="#JavaScript代码在浏览器中是如何被执行的？" class="headerlink" title="JavaScript代码在浏览器中是如何被执行的？"></a>JavaScript代码在浏览器中是如何被执行的？</h2><p>众所周知，javascript在发明之初，仅仅是应用于浏览器执行简单的脚本任务，对浏览器中的DOM元素进行各种操作，所以当时javascript的应用场景十分有限。但随着时间的推移，人们越来越注重上网的体验，</p>
<h4 id="不同的浏览器由不同的浏览器内核组成"><a href="#不同的浏览器由不同的浏览器内核组成" class="headerlink" title="不同的浏览器由不同的浏览器内核组成"></a>不同的浏览器由不同的浏览器内核组成</h4><ul>
<li>Gecko：早期被Netscape和Mozilla Firefox浏览器使用； </li>
<li>Trident：微软开发，被IE4~IE11浏览器使用，但是Edge浏览器已经转向Blink； </li>
<li>Webkit：苹果基于KHTML开发、开源的，用于Safari，Google Chrome之前也在使用； </li>
<li>Blink：是Webkit的一个分支，Google开发，目前应用于Google Chrome、Edge、Opera等； </li>
<li>等等…</li>
</ul>
<h2 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h2><p>事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：</p>
<ul>
<li>排版引擎（layout engine），也称为浏览器引擎（browser engine）、页面渲染引擎（rendering engine） 或样版引擎。</li>
</ul>
<h4 id="渲染引擎的工作过程："><a href="#渲染引擎的工作过程：" class="headerlink" title="渲染引擎的工作过程："></a>渲染引擎的工作过程：</h4><p>以下这张图可以完美的概括浏览器渲染页面的整个过程。</p>
<figure class="image-box">
                <img src="//yoursite.com/2020/11/19/初识node/images/初识node/1-1606446398929.png" alt="1" title class>
                <p>1</p>
            </figure>

<p>在这一过程中，当HTML解析的时候遇到了JavaScript标签，会停止解析HTML，而去加载和执行JavaScript代码。理由很简单。 </p>
<ul>
<li>因为JavaScript代码可以操作我们的DOM；</li>
<li>所以浏览器希望将HTML解析的DOM和JavaScript操作之后的DOM放到一起来生成最终的DOM树，而不是 频繁的去生成新的DOM树；</li>
</ul>
<p>而<strong>javascript</strong>就是由<strong>javascript</strong>引擎来执行的，</p>
<h2 id="javascript引擎"><a href="#javascript引擎" class="headerlink" title="javascript引擎"></a>javascript引擎</h2><ul>
<li>事实上我们编写的JavaScript无论你交给浏览器或者Node执行，最后都是需要被CPU执行的；</li>
<li>但是CPU只认识自己的指令集，实际上是机器语言，才能被CPU所执行；</li>
<li>所以我们需要JavaScript引擎帮助我们将JavaScript代码翻译成CPU指令来执行。</li>
</ul>
<h4 id="常见的javascript引擎"><a href="#常见的javascript引擎" class="headerlink" title="常见的javascript引擎"></a>常见的javascript引擎</h4><ul>
<li>SpiderMonkey：第一款JavaScript引擎，由Brendan Eich开发（也就是JavaScript作者）； </li>
<li>Chakra：微软开发，用于IT浏览器； </li>
<li>JavaScriptCore：WebKit中的JavaScript引擎，Apple公司开发； </li>
<li>V8：Google开发的强大JavaScript引擎，也帮助Chrome从众多浏览器中脱颖而出；</li>
</ul>
<h4 id="webkit内核"><a href="#webkit内核" class="headerlink" title="webkit内核"></a>webkit内核</h4><p>这里我们先以WebKit为例，WebKit事实上由两部分组成的： </p>
<ul>
<li><p>WebCore：负责HTML解析、布局、渲染等等相关的工作； </p>
</li>
<li><p>JavaScriptCore：解析、执行JavaScript代码； </p>
<p>看到这学过小程序的同学应该会感到很熟悉，因为在小程序中编写的JavaScript代码就是被JSCore执行的；</p>
</li>
</ul>
<h4 id="V8引擎"><a href="#V8引擎" class="headerlink" title="V8引擎"></a>V8引擎</h4><p>我们来看一下官方对V8引擎的定义： </p>
<ul>
<li>V8是用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。 </li>
<li>它实现ECMAScript和WebAssembly，并在Windows 7或更高版本，macOS 10.12+和使用x64，IA-32， ARM或MIPS处理器的Linux系统上运行。 </li>
<li>V8可以独立运行，也可以嵌入到任何C ++应用程序中。</li>
</ul>
<h4 id="简要介绍v8引擎原理"><a href="#简要介绍v8引擎原理" class="headerlink" title="简要介绍v8引擎原理"></a>简要介绍v8引擎原理</h4><figure class="image-box">
                <img src="//yoursite.com/2020/11/19/初识node/Blog\source\images\初识node\2.png" alt="2" title class>
                <p>2</p>
            </figure>

<p> V8引擎本身的源码非常复杂，大概有超过100w行C++代码，但是我们可以结合图片，简单了解一下它执行JavaScript代码的原理：</p>
<ul>
<li><p>Parse模块会将JavaScript代码转换成AST（抽象语法树），这是因为解释器并不直接认识JavaScript代码； </p>
<ul>
<li>如果函数没有被调用，那么是不会被转换成AST的； </li>
<li>Parse的V8官方文档：<a href="https://v8.dev/blog/scanner" target="_blank" rel="noopener">https://v8.dev/blog/scanner</a> </li>
</ul>
</li>
<li><p>Ignition是一个解释器，会将AST转换成ByteCode（字节码） p</p>
<ul>
<li>同时会收集TurboFan优化所需要的信息（比如函数参数的类型信息，有了类型才能进行真实的运算）； </li>
<li>如果函数只调用一次，Ignition会执行解释执行ByteCode； </li>
<li>Ignition的V8官方文档：<a href="https://v8.dev/blog/ignition-interpreter" target="_blank" rel="noopener">https://v8.dev/blog/ignition-interpreter</a>  </li>
</ul>
</li>
<li><p>TurboFan是一个编译器，可以将字节码编译为CPU可以直接执行的机器码； -</p>
<ul>
<li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能； </li>
<li>但是，机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如sum函数原来执行的是number类型，后 来执行变成了string类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码； </li>
<li>TurboFan的V8官方文档：<a href="https://v8.dev/blog/turbofan-jit" target="_blank" rel="noopener">https://v8.dev/blog/turbofan-jit</a> </li>
</ul>
</li>
<li><p>上面是JavaScript代码的执行过程，事实上V8的内存回收也是其强大的另外一个原因，不过这里暂时先不展开讨论： </p>
<ul>
<li>Orinoco模块，负责垃圾回收，将程序中不需要的内存回收； </li>
<li>Orinoco的V8官方文档：<a href="https://v8.dev/blog/trash-talk" target="_blank" rel="noopener">https://v8.dev/blog/trash-talk</a></li>
</ul>
<h3 id="浏览器和Node的区别"><a href="#浏览器和Node的区别" class="headerlink" title="浏览器和Node的区别"></a>浏览器和Node的区别</h3><p>我们可以简单理解规划出Node.js和浏览器的差异：</p>
<p><img src="//yoursite.com/2020/11/19/初识node/C:%5CUsers%5Clixiang17%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201118172421256.png" alt="image-20201118172421256"></p>
<p>由图可见，除了HTML，webKit和显卡这些UI相关技术没有支持外，Node的结构与Chrome十分相似。它们二者都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，而Node通过事件驱动来服务I/O。</p>
<h2 id="node-js的安装"><a href="#node-js的安装" class="headerlink" title="node.js的安装"></a>node.js的安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载地址：https:<span class="comment">//nodejs.org/en/</span></span><br></pre></td></tr></table></figure>

<p> Node.js是在2009年诞生的，目前最新的版本是分别是<strong>LTS</strong> 14.15.1，<strong>Current</strong>15.2.1</p>
<h4 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h4><ul>
<li>LTS 版本:相对稳定一些，推荐线上环境使用该版本；</li>
<li>Current版本：最新的Node版本，包含很多新特性,但是有可能会有一些问题；</li>
</ul>
</li>
</ul>
<p><strong>安装</strong>：安装过程中会配置环境变量（让我们可以在命令行使用）并且会安装npm（Node Package Manager）工具；（在后续的文章中会着重探究npm）</p>
<h2 id="Javascript文件在node中运行"><a href="#Javascript文件在node中运行" class="headerlink" title="Javascript文件在node中运行"></a>Javascript文件在node中运行</h2><ul>
<li>首先电脑上需要安装Node.js环境，安装过程中会自动配置环境变量； </li>
<li>可以通过终端命令node    js文件的方式来载入和执行对应的js文件；</li>
</ul>
<figure class="image-box">
                <img src="//yoursite.com/2020/11/19/初识node/Users\lixiang17\AppData\Roaming\Typora\typora-user-images\image-20201119154225991.png" alt="image-20201119154225991" title class>
                <p>image-20201119154225991</p>
            </figure>

<h4 id="Node程序传递参数"><a href="#Node程序传递参数" class="headerlink" title="Node程序传递参数"></a>Node程序传递参数</h4><p>在某些特定的情况下，当我们在执行node程序的时候，可能希望给node传递一些参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js  lx  <span class="number">111</span></span><br></pre></td></tr></table></figure>

<p>如果我们这么做的话，即意味着程序中需要我们所传递的参数.</p>
<p>被传递的参数在node的全局对象process中的argv属性里面找到； 如果我们直接打印这个内置对象，会发现里面包含特别多的信息：比如版本、操作系统等。</p>
<p>argv属性对应的是一个数组，里面包含了我们传递的参数。有了这个数组我们就可以通过遍历的方式，轻而易举地拿到传递的每一个参数。</p>
<figure class="image-box">
                <img src="//yoursite.com/2020/11/19/初识node/Users\lixiang17\AppData\Roaming\Typora\typora-user-images\image-20201119155436056.png" alt="image-20201119155436056" title class>
                <p>image-20201119155436056</p>
            </figure>

<h4 id="node中的全局对象"><a href="#node中的全局对象" class="headerlink" title="node中的全局对象"></a>node中的全局对象</h4><p>在上文提到了process这个全局对象，当然在node中提供了很多的全局对象，但是只有一部分是我们日常开发中经常使用的，在此简要介绍一下：</p>
<p><strong>process对象</strong>：process提供了Node进程中相关的信息。</p>
<ul>
<li>比如Node的运行环境、参数信息等；</li>
</ul>
<p><strong>console对象：</strong>提供了简单的调试控制台，</p>
<ul>
<li>console.log  最常用的输入内容的方式：console.log </li>
<li>console.clear  清空控制台：console.clear </li>
<li>console.trace  打印函数的调用栈：console.trace</li>
</ul>
<p>当然还有一些其他的console的方法，就不一一列举了，可以参考以下地址学习一下</p>
<p><a href="https://nodejs.org/dist/latest-v14.x/docs/api/console.html" target="_blank" rel="noopener">https://nodejs.org/dist/latest-v14.x/docs/api/console.html</a></p>
<p><strong>定时器函数：</strong>在Node中使用定时器有好几种方式：</p>
<ul>
<li>setTimeout(callback, delay[, …args])：callback在delay毫秒后执行一次； </li>
<li>setInterval(callback, delay[, …args])：callback在每delay毫秒重复执行一次；  </li>
<li>setImmediate(callback[, …args])：callback 在I / O事件后的回调的“立即”执行；</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
